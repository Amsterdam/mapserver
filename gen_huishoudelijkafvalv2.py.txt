# Generates the huishoudelijkafval mapfile.

from generate import block, header, p, q
import re

def slugify(s: str) -> str:
    # Function to slugify strings (convert to lowercase and replace non-alphanumeric characters with underscores)
    s = s.replace("ë", "e")  # Replace special characters like 'ë' with 'e'
    return re.sub(r"[^A-Za-z0-9]+", "_", s).strip("_").lower()

# Define layers for huishoudelijkafval
layers = [
    {"group": "afvalcontainers", "name": "gft_coordinaten", "filter": "[fractie_omschrijving] = 'GFT' AND [status] = 1", "symbol": "gfe", "title": "Gftafvalcontainer"},
    {"group": "afvalcontainers", "name": "textiel_coordinaten", "filter": "[fractie_omschrijving] = 'Textiel' AND [status] = 1", "symbol": "textiel", "title": "Textielafvalcontainer"},
    {"group": "afvalcontainers", "name": "papier_coordinaten", "filter": "[fractie_omschrijving] = 'Papier' AND [status] = 1", "symbol": "papier", "title": "Papierafvalcontainer"},
    {"group": "afvalcontainers", "name": "glas_coordinaten", "filter": "[fractie_omschrijving] = 'Glas' AND [status] = 1", "symbol": "glas", "title": "Glasafvalcontainer"},
    {"group": "afvalcontainers", "name": "rest_coordinaten", "filter": "[fractie_omschrijving] = 'Rest' AND [status] = 1", "symbol": "rest", "title": "Restafvalcontainer"},
    {"group": "afvalcontainers", "name": "brood_coordinaten", "filter": "[fractie_omschrijving] = 'Brood' AND [status] = 1", "symbol": "brood", "title": "Broodafvalcontainer"},
    {"group": "afvalcontainers", "name": "onbekend_coordinaten", "filter": "fractie_omschrijving = '' and status = 1", "symbol": "onbekend", "title": "Onbekend"},
    {"group": "kilogram", "name": "wegingen_rest", "filter": "[fractie_omschrijving] = 'Rest'","symbol": "stip","title": "Rest wegingen"},
    {"group": "kilogram", "name": "wegingen_glas", "filter": "[fractie_omschrijving] = 'Glas'","symbol": "stip","title": "Glas wegingen"},
    {"group": "kilogram", "name": "wegingen_papier", "filter": "[fractie_omschrijving] = 'Papier'","symbol": "stip","title": "Papier wegingen"},
    {"group": "kilogram", "name": "wegingen_plastic", "filter": "[fractie_omschrijving] = 'Plastic'","symbol": "stip","title": "Plastic wegingen"},
    {"group": "kilogram", "name": "wegingen_textiel", "filter": "[fractie_omschrijving] = 'Textiel'","symbol": "stip","title": "Textiel wegingen"},
    {"group": "kilogram", "name": "wegingen_grof", "filter": "[fractie_omschrijving] = 'Grof'","symbol": "stip","title": "Grof wegingen"},
    {"group": "kilogram", "name": "wegingen_PMD", "filter": "[fractie_omschrijving] = 'PMD'","symbol": "stip","title": "PMD wegingen"},
    {"group": "kilogram", "name": "wegingen_brood", "filter": "[fractie_omschrijving] = 'Brood'","symbol": "stip","title": "Brood wegingen"},
    {"group": "kilogram", "name": "wegingen_onbekend", "filter": "[fractie_omschrijving] isnull","symbol": "stip","title": "Onbekend wegingen"},
    {"group": "pand_loopafstand", "name": "pand_loopafstand_rest", "filter": "[fractie_omschrijving] = 'Rest'", "symbol": "rest", "title": "Loopafstand tot restafvalcontainer"},
    {"group": "pand_loopafstand", "name": "pand_loopafstand_glas", "filter": "[fractie_omschrijving] = 'Glas'", "symbol": "rest", "title": "Loopafstand tot glascontainer"},
    {"group": "pand_loopafstand", "name": "pand_loopafstand_papier", "filter": "[fractie_omschrijving] = 'Papier'", "symbol": "rest", "title": "Loopafstand tot papiercontainer"},
    {"group": "pand_loopafstand", "name": "pand_loopafstand_textiel", "filter": "[fractie_omschrijving] = 'Textiel'", "symbol": "rest", "title": "Loopafstand tot textielcontainer"},
    {"group": "pand_loopafstand", "name": "pand_loopafstand_gft", "filter": "[fractie_omschrijving] = 'GFT'", "symbol": "rest", "title": "Loopafstand tot gftafvalcontainer"}
]

weight_ranges = [
    {"name": "< 50 kg", "expression": "[netto_gewicht] < 50", "color": (0, 104, 55)},
    {"name": "< 90 kg", "expression": "[netto_gewicht] < 90", "color": (26, 152, 80)},
    {"name": "< 130 kg", "expression": "[netto_gewicht] < 130", "color": (102, 189, 99)},
    {"name": "< 170 kg", "expression": "[netto_gewicht] < 170", "color": (166, 217, 106)},
    {"name": "< 210 kg", "expression": "[netto_gewicht] < 210", "color": (217, 239, 139)},
    {"name": "< 260 kg", "expression": "[netto_gewicht] < 260", "color": (254, 224, 139)},
    {"name": "< 310 kg", "expression": "[netto_gewicht] < 310", "color": (253, 174, 97)},
    {"name": "< 390 kg", "expression": "[netto_gewicht] < 390", "color": (244, 109, 67)},
    {"name": "< 500 kg", "expression": "[netto_gewicht] < 500", "color": (215, 48, 39)},
    {"name": "> 500 kg", "expression": "[netto_gewicht] >= 500", "color": (165, 0, 38)}
]

loopafstanden_ranges = [
    {"name": "<= 30 m", "expression": "[loopafstand_categorie_omschrijving] eq '0 - 30 M'", "color":  '#5B8E59'},
    {"name": "30 - 90 m", "expression": "[loopafstand_categorie_omschrijving] eq '30 - 90 M'", "color": '#5FA15C'},
    {"name": "90 - 120 m", "expression": "[loopafstand_categorie_omschrijving] eq '90 - 120 M'", "color": '#71BF6E'},
    {"name": "120 - 150 m", "expression": "[loopafstand_categorie_omschrijving] eq '120 - 150 M'", "color": '#8EF08A'},
    {"name": "150 - 210 m", "expression": "[loopafstand_categorie_omschrijving] eq '150 - 210 M'", "color": '#FF9933'},
    {"name": "210 - 1000 m", "expression": "[loopafstand_categorie_omschrijving] eq '210 - 1000 M'", "color": '#FF6F33'},
    {"name": "vanaf 1000 m", "expression": "[loopafstand_categorie_omschrijving] eq 'Vanaf 1000 M'", "color": '#D6D6D6'}
]

loopafstanden_ranges_textiel = [
    {"name": "<= 90 m", "expression": "[loopafstand_categorie_omschrijving] eq '0 - 90 M'", "color":  '#5B8E59'},
    {"name": "90 - 180 m", "expression": "[loopafstand_categorie_omschrijving] eq '90 - 180 M'", "color": '#5FA15C'},
    {"name": "180 - 350 m", "expression": "[loopafstand_categorie_omschrijving] eq '180 - 350 M'", "color": '#71BF6E'},
    {"name": "350 - 370 m", "expression": "[loopafstand_categorie_omschrijving] eq '350 - 370 M'", "color": '#FDCC8C'},
    {"name": "370 - 480 m", "expression": "[loopafstand_categorie_omschrijving] eq '370 - 480 M'", "color": '#FF9933'},
    {"name": "480 - 1500 m", "expression": "[loopafstand_categorie_omschrijving] eq '480 - 1500 M'", "color": '#FF6F33'},
    {"name": "vanaf 1500 m", "expression": "[loopafstand_categorie_omschrijving] eq 'Vanaf 1500 M'", "color": '#D6D6D6'}
]


# Generate the mapfile
header("Huishoudelijk Afval Mapfile")

with block("MAP"):
    p("NAME", "huishoudelijkafvalv2")
    p("INCLUDE", "header.inc")

    with block("WEB"):
        with block("METADATA"):
            q("ows_title", "afvalcontainers")
            q("ows_abstract", "Kaart met gegevens over huishoudelijk afvalcontainers in Amsterdam")
            q("wms_extent", "4.58565 52.03560 5.31360 52.48769")
            q("wfs_extent", "4.58565 52.03560 5.31360 52.48769")
            q("gml_types", "auto")
            q("ows_onlineresource", "MAP_URL_REPLACE/maps/huishoudelijkafvalv2")            
    with block("LEGEND"):
            p("STATUS ON")
            p("KEYSIZE 30 30")

    # Generate layers for huishoudelijkafval containers
    for layer in layers:

        if layer["group"] == 'afvalcontainers':
            with block("LAYER"):
                p("NAME", slugify(layer['name']))
                p("GROUP", f"{layer['group']}")
                with block("PROJECTION"):
                    q("init=epsg:28992")

                p("INCLUDE", "connection/dataservices.inc")
                if layer["name"] == 'onbekend_coordinaten':
                    p("DATA", f"geometrie FROM (select * FROM public.huishoudelijkafval_container_v2 where fractie_omschrijving is null and status = 1) as subquery USING srid=28992 USING UNIQUE id")
                else:
                    p("DATA", f"geometrie FROM public.huishoudelijkafval_container_v2 USING srid=28992 USING UNIQUE id")
                    print(f"FILTER ({layer['filter']})")
                p("TYPE POINT")
                p("MINSCALEDENOM", 10) 
                p("MAXSCALEDENOM", 400000)

                with block("METADATA"):
                    q("ows_title", layer['title'])
                    q("wfs_srs", "EPSG:28992")
                    q("wfs_abstract", f"{layer['title']} in Amsterdam")
                    q("wfs_enable_request", "*")

                p("LABELITEM", "id_nummer")

                with block ("CLASS"): 
                    p("NAME", f"{slugify(layer['title'])}")
                    p("TITLE", f"{layer['title']}")

                    with block("STYLE"):
                        p("SYMBOL", layer['symbol'])
                        p("SIZE", 30)

                    with block("LABEL"):
                        p("MAXSCALEDENOM 4000")
                        p("COLOR 102 102 102")
                        p("OUTLINECOLOR 255 255 255")
                        p("OUTLINEWIDTH 3")
                        p("FONT", "Ubuntu-M")
                        p("TYPE truetype")
                        p("SIZE 10")
                        p("POSITION AUTO")
                        p("PARTIALS FALSE")
                        p("OFFSET -60 10")
            

        # #vanaf hier is het voor de wegingen,
        # DEZE IS NIET AF MAAR OP VERZOEK VAN ERGUDER IS DEZE UITGEZET
        # if layer["group"] == 'kilogram':
        #     with block("LAYER"):
        #         p("NAME", slugify(layer['name']))
        #         p("GROUP", f"{layer['group']}")
        #         with block("PROJECTION"):
        #             q("init=epsg:28992")

        #         p("INCLUDE", "connection/dataservices.inc")
        #         p("DATA", """geometrie FROM (select * from public.huishoudelijkafval_weging where datum_weging > (NOW() - INTERVAL '6 months') ORDER BY datum_weging desc) as subquery USING srid=28992 USING UNIQUE id""")
        #         print(f"FILTER ({layer["filter"]})")
        #         p("TYPE POINT")
        #         p("MINSCALEDENOM", 10)
        #         p("MAXSCALEDENOM", 400000)

        #         with block("METADATA"):
        #             q("wfs_title", layer['title'])
        #             q("wfs_srs", "EPSG:28992")
        #             q("wfs_abstract", f"{layer['title']} in Amsterdam")
        #             q("wfs_enable_request", "*")

        #         p("LABELITEM", "id")

        #         for range in weight_ranges:
        #             with block ("CLASS"): 
        #                 p("NAME", slugify(range["name"]))
        #                 p("TITLE", range["name"])
        #                 p('EXPRESSION', range['expression'])

        #                 with block("STYLE"):
        #                     p('SYMBOL', 'stip')
        #                     p(f"COLOR {" ".join(map(str, range['color']))}")
        #                     p("SIZE", 6)

        #                 with block("LABEL"):
        #                     p("MAXSCALEDENOM 4000")
        #                     p("COLOR 102 102 102")
        #                     p("OUTLINECOLOR 255 255 255")
        #                     p("OUTLINEWIDTH 3")
        #                     p("FONT", "Ubuntu-M")
        #                     p("TYPE truetype")
        #                     p("SIZE 10")
        #                     p("POSITION AUTO")
        #                     p("PARTIALS FALSE")
        #                     p("OFFSET -60 10")


        #vanaf hier is het voor de loopafstanden
        if layer["group"] == 'pand_loopafstand':
            loopafstanden_ranges_selected = loopafstanden_ranges_textiel if layer['name'] == 'pand_loopafstand_textiel' else loopafstanden_ranges
            for range in loopafstanden_ranges_selected:
                with block("LAYER"):
                    p("NAME", slugify(layer['name']) + ' ' + range['name'])
                    p("GROUP", f"{layer['group']}")
                    with block("PROJECTION"):
                        q("init=epsg:28992") 

                    p("INCLUDE", "connection/dataservices.inc")
                    p("DATA", "geometrie FROM (SELECT bol.id, bol.geometrie, bol.fractie_omschrijving, lac.loopafstand_categorie_omschrijving FROM public.huishoudelijkafval_bag_object_loopafstand_v2 bol INNER JOIN public.huishoudelijkafval_loopafstand_categorie_v2 lac ON bol.loopafstand_categorie_id = lac.id WHERE 1=1) rest USING srid=28992 USING UNIQUE id")
                    print(f"FILTER ({layer['filter']} AND {range['expression']})")
                    p("TYPE POLYGON")
                    p("MINSCALEDENOM", 10)
                    p("MAXSCALEDENOM", 400000)

                    with block("METADATA"):
                        q("ows_title", layer['title'] + ' ' + range["name"])
                        q("wfs_title", layer['title'] + ' ' + range["name"])
                        q("wfs_srs", "EPSG:28992")
                        q("wfs_abstract", f"{layer['title']} in Amsterdam")
                        q("wfs_enable_request", "*")
                        q("wms_group_title", "loopafstand (per pand)")


                    p("LABELITEM", "id")

                    with block ("CLASS"): 
                        p("NAME", f"{slugify(range['name'])}")
                        p("TITLE", f"{range['name']}")

                        with block("STYLE"):
                            p(f"COLOR  '{range['color']}'")
                            p("WIDTH ", 2)
                            p ("OPACITY", 80)
                            p (f"OUTLINECOLOR '{range['color']}'")

                        with block("LABEL"):
                            p("MAXSCALEDENOM 500")
                            p("COLOR 102 102 102")
                            p("OUTLINECOLOR 255 255 255")
                            p("OUTLINEWIDTH 3")
                            p("FONT", "Ubuntu-M")
                            p("TYPE truetype")
                            p("SIZE 10")
                            p("POSITION AUTO")
                            p("PARTIALS FALSE")
                            p("OFFSET -60 10")