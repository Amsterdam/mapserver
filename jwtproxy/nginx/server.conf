upstream jwtproxy {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # Unix domain servers
    #server unix:/tmp/shared/jwtproxy_1.sock fail_timeout=0;
    #server unix:/tmp/jwtproxy_2.sock fail_timeout=0;
    #server unix:/tmp/jwtproxy_3.sock fail_timeout=0;
    #server unix:/tmp/jwtproxy_4.sock fail_timeout=0;

    # Unix domain sockets are used here due to their high performance,
    # but TCP/IP sockets could be used instead:
    server 127.0.0.1:8081 fail_timeout=0;
    # server 127.0.0.1:8082 fail_timeout=0;
    # server 127.0.0.1:8083 fail_timeout=0;
    # server 127.0.0.1:8084 fail_timeout=0;
}

server {
  listen 8000;
  client_max_body_size 4G;

  location / {
    # By default, NGINX redefines two header fields in proxied requests, “Host” and “Connection”,
    # and eliminates the header fields whose values are empty strings.
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass_request_headers on;
    proxy_redirect off;
    proxy_buffering off;
    proxy_http_version 1.1; # so we can use chunked encoding
    proxy_pass http://jwtproxy;
  }
}
